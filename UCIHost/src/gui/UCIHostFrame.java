/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.mail.Message;
import javax.mail.Message.RecipientType;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import mail.MailHandler;

import personalize.User;

import server.ControlServer;
import server.EngineClient;
import server.ProtocolConsts;
import server.UCIUtil;
import udp.DatagramEngineServer;
import engines.Engine;

/**
 *
 * @author Pratik
 */
public class UCIHostFrame extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = -8263607979138604916L;
	private EngineConfigs engineConfigs = new EngineConfigs();
    private DefaultTableModel tableModel = new DefaultTableModel();
    private static final int DEFAULT_ADMIN_PORT = 11000;
    private Properties resourceMap = new Properties();
    private File ENGINE_CONFIG_FILE = new File("config.ini");
    private Map<String, DatagramEngineServer> serverMap = new HashMap<String, DatagramEngineServer>();
    
    /** Creates new form NewJFrame 
     * @throws IOException 
     * @throws FileNotFoundException */
    public UCIHostFrame() throws FileNotFoundException, IOException {
        initComponents();
        postInit();
        Thread mailThread = new Thread(new MailHandler());
        mailThread.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * @throws IOException 
     * @throws FileNotFoundException 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() throws FileNotFoundException, IOException {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblEngines = new javax.swing.JTable();
        cmdAddRow = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdDeleteRow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        String propName = getClass().getName().substring(getClass().getName().lastIndexOf(".")+1, getClass().getName().length())+".properties";
        resourceMap.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(propName));
        setTitle(resourceMap.getProperty("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tblEngines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Activate", "Name", "Path", "Port"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableModel = (DefaultTableModel) tblEngines.getModel();
        tblEngines.setName("tblEngines"); // NOI18N
        tblEngines.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEnginesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblEngines);
        tblEngines.getColumnModel().getColumn(0).setResizable(false);
        tblEngines.getColumnModel().getColumn(0).setPreferredWidth(1);
        tblEngines.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getProperty("tblEngines.columnModel.title0")); // NOI18N
        tblEngines.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getProperty("tblEngines.columnModel.title1")); // NOI18N
        tblEngines.getColumnModel().getColumn(2).setPreferredWidth(250);
        tblEngines.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getProperty("tblEngines.columnModel.title2")); // NOI18N
        tblEngines.getColumnModel().getColumn(3).setPreferredWidth(40);
        tblEngines.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getProperty("tblEngines.columnModel.title3")); // NOI18N

        cmdAddRow.setText(resourceMap.getProperty("cmdAddRow.label")); // NOI18N
        cmdAddRow.setName("cmdAddRow"); // NOI18N
        cmdAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddRowActionPerformed(evt);
            }
        });

        cmdSave.setText(resourceMap.getProperty("cmdSave.label")); // NOI18N
        cmdSave.setName("cmdSave"); // NOI18N
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        cmdDeleteRow.setText(resourceMap.getProperty("cmdDeleteRow.text")); // NOI18N
        cmdDeleteRow.setName("cmdDeleteRow"); // NOI18N
        cmdDeleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteRowActionPerformed(evt);
            }
        });
        addWindowListener(new WindowAdapter() {
        	
        	@Override
        	public void windowClosing(WindowEvent e) {
        		super.windowClosed(e);
        		for(Engine engine : engineConfigs.getUciEngines()) {
        			try {
						if(engine.isState())
							engine.stop();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
        		}
        	}
		});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdAddRow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdDeleteRow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdSave))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 846, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdAddRow)
                    .addComponent(cmdSave)
                    .addComponent(cmdDeleteRow))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void tblEnginesMouseClicked(java.awt.event.MouseEvent evt) {
        String engineName = (String) tblEngines.getModel().getValueAt(tblEngines.getSelectedRow(), tblEngines.getSelectedColumn()+1);
        Boolean activate = (Boolean) tblEngines.getModel().getValueAt(tblEngines.getSelectedRow(), tblEngines.getSelectedColumn());
        for(Engine engine : engineConfigs.getUciEngines()) {
        	if(engine.getName().equals(engineName)) {
        		//engine.changeState(activate);
				if(activate) {
					DatagramEngineServer datagramEngineServer = new DatagramEngineServer(engine);
					Thread t = new Thread(datagramEngineServer);
					t.start();
					System.out.println("started thread");
					serverMap.put(engineName, datagramEngineServer);
					break;
				}
				else {
					if(serverMap.containsKey(engineName)) {
						serverMap.get(engineName).stop();
					}
				}
        	}
        }
    }                                       

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {                                        
        File file = new File(System.getProperty("user.dir")+"/config.ini");
        try {
            if(!file.exists()) {
                file.createNewFile();
            }
            engineConfigs.saveConfig(new FileOutputStream(file));
        } catch (IOException ex) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
    }                                       

    private void cmdAddRowActionPerformed(java.awt.event.ActionEvent evt) {                                          
        handleFileSelection();
    }                                         

    private void cmdDeleteRowActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(!Boolean.valueOf(""+tableModel.getValueAt(tblEngines.getSelectedRow(), 0)).equals(true)) {
            tableModel.removeRow(tblEngines.getSelectedRow());
        }
        else {
            alert("Please stop the running engine first");
        }
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    	
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
					new UCIHostFrame().setVisible(true);
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JButton cmdAddRow;
    private javax.swing.JButton cmdDeleteRow;
    private javax.swing.JButton cmdSave;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblEngines;
    // End of variables declaration

    private void postInit() throws FileNotFoundException, IOException {
    	engineConfigs.readConfig(new FileInputStream(ENGINE_CONFIG_FILE));
    	for(Engine engine : engineConfigs.getUciEngines()) {
    		tableModel.addRow(new Object[] {false, engine.getName(), engine.getPath(), engine.getPort()});
    	}
    	this.update(getGraphics());
    }
    
    private void handleFileSelection() {
        JFileChooser fileChooser = new JFileChooser("H:/Engines/Houdini_15a");        
        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(File pathname) {
                if(pathname.isDirectory()) {
                    return true;
                }
                if(pathname.getName().lastIndexOf(".") != -1 && "exe".equals(pathname.getName().substring(pathname.getName().lastIndexOf(".")+1))) {
                   return true; 
                }
                return false;
            }

            @Override
            public String getDescription() {
                return ".exe";
            }
        });
        int response = fileChooser.showOpenDialog(this);
        if(JFileChooser.APPROVE_OPTION == response) {
            File selectedFile = fileChooser.getSelectedFile();
            if(null != selectedFile) {
            	try {
					Engine newEngine = new Engine(selectedFile.getAbsolutePath());
					if(!checkDuplicateEngine(newEngine)) {
						newEngine.setPort(getNextAvailablePort());
						engineConfigs.getUciEngines().add(newEngine);	
						((DefaultTableModel)tblEngines.getModel()).addRow(new Object[]{false, newEngine.getName(), newEngine.getPath(),newEngine.getPort()});
					}
					else {
						JOptionPane.showMessageDialog(this, resourceMap.getProperty("duplicate.engine"));
					}
				} catch (IOException e) {
					e.printStackTrace();
				} 
            }
        }        
        
    }
    
    private void saveConfig(File file) throws IOException {
        file.createNewFile();
        engineConfigs.saveConfig(new FileOutputStream(file));
    }
    
    private void alert(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
    
    private void handleEngineActivation() {
        
    }
    
    private int getNextAvailablePort() {
    	int max = DEFAULT_ADMIN_PORT + 1;
    	for(Engine engine : engineConfigs.getUciEngines()) {
    		if(engine.getPort() >= max)
    			max = engine.getPort()+1;
    	}
    	return max;
    }
    
    private boolean checkPortAvailability(int port) {
    	for(Engine engine : engineConfigs.getUciEngines()) {
    		if(engine.getPort() == port)
    			return false;
    	}
    	return true;
    }
    
    private boolean checkDuplicateEngine(Engine newEngine) {
    	for(Engine engine : engineConfigs.getUciEngines()) {
    		if(engine.getEngineId().equals(newEngine.getEngineId()))
    			return true;
    	}
    	return false;
    }
    
    
    private boolean exit = false;
    public void startAdminServer() {
		String response;
		ServerSocket serverSocket = null;
		Socket clientSocket = null;
		try {
			serverSocket = new ServerSocket(DEFAULT_ADMIN_PORT);	
			System.out.println("Port number: "+DEFAULT_ADMIN_PORT+" "+serverSocket.getLocalSocketAddress());
			while (!exit) {
				System.out.println("waiting for connection...");
				clientSocket = serverSocket.accept();
				System.out.println("Connection received from " + clientSocket.getInetAddress().getHostName());
				System.out.println(clientSocket.getInetAddress().getHostName());
				response = UCIUtil.readStream(clientSocket.getInputStream());
				System.out.println(response);
				if(response.indexOf(ProtocolConsts.AUTHENTICATE) == 0) {
					User user = new User();
					if(UCIUtil.authenticate(response, user)) {
						UCIUtil.writeString(ProtocolConsts.AUTHENTICATION_SUCCESSFUL, clientSocket.getOutputStream());
						System.out.println("authenticated");
						Properties prop = new Properties();
						prop.load(new FileInputStream(System.getProperty("user.dir")+"/"+user.getUserName()+".ini"));
					}
					else {
						UCIUtil.writeString(ProtocolConsts.AUTHENTICATION_FAIL, clientSocket.getOutputStream());
					}
				}
				else if(response.indexOf(ProtocolConsts.GET_AVAILABLE_ENGINES) == 0) {
					
				}
			}
			serverSocket.close();
		} catch (IOException e) {
			try {
				System.out.println(e.getMessage());
				clientSocket.close();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
	}
    
    public void send(String from, String to, String subject, String content){
    	 
		Properties props = new Properties();
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.port", "465");
 
		Session mailSession = Session.getDefaultInstance(props);
		Message simpleMessage = new MimeMessage(mailSession);
 
		InternetAddress fromAddress = null;
		InternetAddress toAddress = null;
		try {
			fromAddress = new InternetAddress(from);
			toAddress = new InternetAddress(to);
		} catch (AddressException e) {
			e.printStackTrace();
		}
 
		try {
			simpleMessage.setFrom(fromAddress);
			simpleMessage.setRecipient(RecipientType.TO, toAddress);
			simpleMessage.setSubject(subject);
			simpleMessage.setText(content);
 
			Transport.send(simpleMessage);
		} catch (MessagingException e) {
			e.printStackTrace();
		}
	}
    
    public static String getPublicIP() throws IOException {
		URL whatismyip = new URL("http://automation.whatismyip.com/n09230945.asp");
	    URLConnection connection = whatismyip.openConnection();
	    connection.addRequestProperty("Protocol", "Http/1.1");
	    connection.addRequestProperty("Connection", "keep-alive");
	    connection.addRequestProperty("Keep-Alive", "1000");
	    connection.addRequestProperty("User-Agent", "Web-Agent");

	    BufferedReader in = 
	        new BufferedReader(new InputStreamReader(connection.getInputStream()));

	    String ip = in.readLine(); //you get the IP as a String
	    return ip;
	}

}
