/*
 * MessagePanel.java
 *
 * Created on August 15, 2009, 9:22 PM
 */

package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.text.NumberFormat;

import javax.mail.Message;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

import org.lobobrowser.html.gui.HtmlPanel;
import org.lobobrowser.html.test.SimpleHtmlRendererContext;
import org.lobobrowser.html.test.SimpleUserAgentContext;

import util.FileUtil;
import util.MessageUtil;
import account.MailAccount;
import constants.Consts;
import email.EmailAttachment;
import email.EmailMessage;
import email.MessageIndex;

/**
 *
 * @author  Pratik
 */
public class MessagePanel extends javax.swing.JPanel implements Consts {
	
	private static final long serialVersionUID = -4666178046988360194L;
	private EmailMessage emailMessage;
	private Message message = null;
	private MessageIndex messageIndex = null;
	private MailAccount mailAccount;
	private EmailAttachment selectedAttachment = null;
	private String htmlContent = null;
	
    /** Creates new form MessagePanel */
    public MessagePanel(MessageIndex messageIndex,String accountName) {
    	title = messageIndex.getMessageSubject();
    	this.messageIndex = messageIndex;
    	this.accountName = accountName;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        lblFrom = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        lblTo = new javax.swing.JLabel();
        txtTo = new javax.swing.JTextField();
        lblSubject = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        lblAttachments = new javax.swing.JLabel();
        cmbAttachments = new javax.swing.JComboBox();
        cmdDownload = new javax.swing.JButton();
        dateTimePanel = new javax.swing.JPanel();
        lblDateTime = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtAttachmentSize = new javax.swing.JTextField();
        cmdAttachmentSizeUnit = new javax.swing.JComboBox();
        messageScrollPane = new javax.swing.JScrollPane();
        messageEditor = new javax.swing.JEditorPane();
        htmlPanel = new HtmlPanel();
        context = new SimpleHtmlRendererContext(htmlPanel, new SimpleUserAgentContext());
        headerPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblFrom.setText("From: ");

        txtFrom.setEditable(false);

        lblTo.setText("To: ");

        txtTo.setEditable(false);

        lblSubject.setText("Subject: ");

        txtSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSubjectActionPerformed(evt);
            }
        });

        lblAttachments.setText("Attachments:");

        cmbAttachments.setModel(new javax.swing.DefaultComboBoxModel());

        cmdDownload.setText("Download");
        cmdDownload.setEnabled(false);

        dateTimePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblDateTime.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblDateTime.setText("Date: ");

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblDate.setText("dt");

        lblTime.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblTime.setText("time");

        javax.swing.GroupLayout dateTimePanelLayout = new javax.swing.GroupLayout(dateTimePanel);
        dateTimePanel.setLayout(dateTimePanelLayout);
        dateTimePanelLayout.setHorizontalGroup(
            dateTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dateTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDate)
                    .addComponent(lblDateTime)
                    .addComponent(lblTime))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        dateTimePanelLayout.setVerticalGroup(
            dateTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDateTime)
                .addGap(13, 13, 13)
                .addComponent(lblDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTime)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel1.setText("Size:");

        cmdAttachmentSizeUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "bytes", "kb", "mb", "gb", "tb" }));
        cmbAttachments.addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent arg0) {
        		cmbAttachmentActionPerformed(arg0);    		
        	}
        });
        
        cmdDownload.addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent arg0) {
        		cmdDownloadActionPerformed(arg0);        		
        	}
        });

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblSubject)
                        .addComponent(lblAttachments, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblTo))
                    .addComponent(lblFrom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addComponent(cmbAttachments, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAttachmentSize, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(cmdAttachmentSizeUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdDownload))
                    .addComponent(txtTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(txtFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(txtSubject, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFrom))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSubject)
                            .addComponent(txtSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAttachments)
                            .addComponent(cmbAttachments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdDownload)
                            .addComponent(jLabel1)
                            .addComponent(txtAttachmentSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdAttachmentSizeUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(dateTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        messageScrollPane.setViewportView(htmlPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(htmlPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(htmlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void txtSubjectActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
}       
    public void cmdDownloadActionPerformed(ActionEvent evt) { 
    	if(Consts.EMAIL_CLIENT_DOWNLOAD_MODES[Consts.EMAIL_CLIENT_DOWNLOAD_FULL_MODE].equals(mailAccount.getMailHandler().getConfigurationProperty(Consts.EMAIL_CLIENT_DOWNLOAD_MODE))) {
    		File folder = FileUtil.chooseFolder(mailAccount.getMailHandler().getMainFrame());
    		File targetFile = new File(folder.getAbsolutePath()+"/"+cmbAttachments.getSelectedItem());
    		if(!targetFile.exists()) {
    			for(EmailAttachment attachment:emailMessage.getAttachmentList()) {
    				if(cmbAttachments.getSelectedItem().equals(attachment.getAttachmentName())) {
    					try {
							FileUtil.copyFile(attachment.getAttachmentPath(), targetFile.getAbsolutePath());
						} catch (IOException e) {
							e.printStackTrace();
							JOptionPane.showMessageDialog(mailAccount.getMailHandler().getMainFrame(), "File cannot be saved, an exception occured");
						}
    				}
    			}
    		}	
    		System.out.println(cmbAttachments.getSelectedItem());
    	}
    	else {
    		for(EmailAttachment emailAttachment:emailMessage.getAttachmentList()) {
        		if(cmbAttachments.getSelectedItem().equals(emailAttachment.getAttachmentName())) {
        			selectedAttachment = emailAttachment;
        			break;
        		}
        	}
    		//new AttachmentDownloaderThread(mailAccount.getAccountInformation(),"INBOX",emailMessage.getUID(),emailMessage.getMessageNumber(),(String) cmbAttachments.getSelectedItem(),mailAccount.getMailHandler().getMainFrame());
        	java.awt.EventQueue.invokeLater(new Runnable() {
    			public void run() {
    				new AttachmentDownloadFrame(mailAccount,emailMessage,selectedAttachment,"INBOX");
    			}
    		});
    	}
	}  
    
    public void cmbAttachmentActionPerformed(ActionEvent evt) {
    	int selectedIndex = cmbAttachments.getSelectedIndex();
    	float size = emailMessage.getAttachmentList().get(selectedIndex).getAttachmentSize();
    	int level=0;
    	if(1024 > size) {
    		//do nothing
    	}
    	else if(1024 < size && 1024*1024 > size) {
    		level=1;
    		size=size/1024;    		
    	}
    	else if(1024*1024 < size && 1024*1024*1024 > size) {
    		level=2;
    		size=size/(1024*1024);		
    	}
    	else if(1024*1024*1024 < size && 1024*1024*1024*1024 > size) {
    		level=3;
    		size=size/(1024*1024*1024);    		
    	}
    	NumberFormat numberFormat=NumberFormat.getInstance();
    	numberFormat.setMaximumFractionDigits(2);    	
    	txtAttachmentSize.setText(numberFormat.format(size));
		cmdAttachmentSizeUnit.setSelectedIndex(level);
    }    
    
    public Message getMessage() {
		return message;
	}
    
	public MessageIndex getMessageIndex() {
		return messageIndex;
	}




	// Variables declaration - do not modify
    private javax.swing.JComboBox cmbAttachments;
    private javax.swing.JComboBox cmdAttachmentSizeUnit;
    private javax.swing.JButton cmdDownload;
    private javax.swing.JPanel dateTimePanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblAttachments;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDateTime;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTo;
    private javax.swing.JEditorPane messageEditor;
    private javax.swing.JScrollPane messageScrollPane;
    private javax.swing.JTextField txtAttachmentSize;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtSubject;
    private javax.swing.JTextField txtTo;    
    private String title;
    private String accountName;
    private HtmlPanel htmlPanel;
    private SimpleHtmlRendererContext context;
    // End of variables declaration

	
	public void showMessageHeader(MessageIndex messageIndex) {
		txtFrom.setText(MessageUtil.getStringFromAddress(messageIndex.getFrom()));
		txtTo.setText(MessageUtil.getStringFromAddress(messageIndex.getTo()));
		txtSubject.setText(messageIndex.getMessageSubject());
		lblDate.setText(MessageUtil.getShortDate(messageIndex.getSentDate()));
		lblTime.setText(MessageUtil.getTime(messageIndex.getSentDate()));
	}
	
	public void showMessageDetail(EmailMessage emailMessage,MailAccount mailAccount) {
		this.emailMessage=emailMessage;
		this.mailAccount=mailAccount;
		showMessageHeader(emailMessage);
		for(EmailAttachment emailAttachment:emailMessage.getAttachmentList()) {
			cmbAttachments.addItem(emailAttachment.getAttachmentName());
		}
		if(emailMessage.getAttachmentList().size() > 0) {
			cmdDownload.setEnabled(true);
		}
		
		messageEditor.getDocument().putProperty("IgnoreCharsetDirective",Boolean.TRUE);
		String htmlContent="",textContent="";
		for(int i=0;i<emailMessage.getContentTypeList().size();i++) {
			if(emailMessage.getContentTypeList().get(i).equals(TEXT_CONTENT)) {
				textContent+=emailMessage.getContentList().get(0);
			}
			else {
				htmlContent+=emailMessage.getContentList().get(i);
			}
		}
		if(htmlContent.length() > 0) {
			messageEditor.setContentType("text/html");
			messageEditor.setText(htmlContent);
		}
		else {
			messageEditor.setContentType("text/plain");
			messageEditor.setText(textContent);		
		}		
	}
	
	public void showMessageDetail(Message message,MailAccount mailAccount) {
		htmlContent = "";
		this.message = message;
		emailMessage = new EmailMessage(message,mailAccount.getAccountInformation());
		this.mailAccount=mailAccount;
		for(String str:emailMessage.getContentList()) {
			if(null != str)
				htmlContent += str;
		}
		setHTMLContent(htmlContent);
		showAttachments(emailMessage);
		/*try {System.out.println(message.getContentType());
			if(message.getContentType().toLowerCase().startsWith("text/html")) {
				htmlContent = (String) message.getContent();
			}
			else if(message.getContentType().toLowerCase().startsWith("text/plain")) {
				textContent = (String) message.getContent();
			}

			if (null != htmlContent && htmlContent.length() > 0) {
				//messageEditor.setContentType("text/html");
				//messageEditor.getDocument().putProperty( "Ignore-Charset", "true" );
				//messageEditor.setText(htmlContent);
				setHTMLContent(textContent);
			} else {
				//messageEditor.setContentType("text/plain");
				//messageEditor.setText(textContent);
				setHTMLContent(htmlContent);
			}
		} catch (MessagingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}*/
	}
	
	public void showAttachments(EmailMessage emailMessage) {		
		DefaultComboBoxModel model = (DefaultComboBoxModel) cmbAttachments.getModel();
		for(EmailAttachment emailAttachment:emailMessage.getAttachmentList()) {
			model.addElement(emailAttachment.getAttachmentName());
			if(!cmdDownload.isEnabled()) {
				cmdDownload.setEnabled(true);
			}
		}
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getAccountName() {
		return accountName;
	}

	public void setAccountName(String accountName) {
		this.accountName = accountName;
	}
	
	public void setHTMLContent(String htmlcontent) {
		htmlPanel.setHtml(htmlcontent, null, context);
	}

	public String getHtmlContent() {
		return htmlContent;
	}
	
}
