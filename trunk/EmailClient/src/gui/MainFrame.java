/*
 * NewJFrame1.java
 *
 * Created on August 11, 2009, 7:37 PM
 */

package gui;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;

import network.MailHandler;
import threads.BasicMailSaverThread;
import threads.HeaderThread;
import threads.MailSaverThread;
import util.MessageIndexDateComparator;
import util.MessageUtil;
import account.AccountInformation;
import account.MailAccount;
import constants.Consts;
import email.EmailMessage;
import email.MessageIndex;
import filesystem.DAO;
import filesystem.MyLogger;

/**
 * @author  Pratik
 */
public class MainFrame extends javax.swing.JFrame implements Consts,Runnable {
	public static JTextArea console = new JTextArea();
	public static JScrollPane consoleScrollPane  = new JScrollPane(console);		
	protected static MyLogger LOG = new MyLogger(MainFrame.class ,MainFrame.console);
	private static final long serialVersionUID = -3659610765426323372L;
	public static final Dimension MAIN_FRAME_DIMENSION = new Dimension(new Dimension(1000,600));
	public static final Dimension CONSOLE_DIMENSION = new Dimension(new Dimension(950,50));
	private MailHandler mailHandler=null;
	private Map<String,MyScrollPane> componentMap=null;

	/** Creates new form NewJFrame1 */
	public MainFrame(MailHandler mailHandler) {
		this.mailHandler=mailHandler;  
		componentMap=new HashMap<String, MyScrollPane>();
		initComponents();

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		setPreferredSize(MAIN_FRAME_DIMENSION);
		consoleScrollPane.setPreferredSize(CONSOLE_DIMENSION);
		topPanel = new javax.swing.JPanel();
		mainPanel = new javax.swing.JPanel();
		treePanel = new javax.swing.JPanel();
		tabbedPane = new javax.swing.JTabbedPane();
		statusPanel = new javax.swing.JPanel();
		lblConnectionStatus = new javax.swing.JLabel();
		lblTotalNumberOfMail = new javax.swing.JLabel();
		lblNoMailsCopied = new javax.swing.JLabel();
		lblUnreadMails = new javax.swing.JLabel();
		menuBar = new javax.swing.JMenuBar();
		mnuFile = new javax.swing.JMenu();
		mnuNew = new javax.swing.JMenu();
		mnuExit = new CustomJMenuItem(this,GUIConsts.EXIT_MENU_DEFAULT_TEXT);
		mnuNewMail = new CustomJMenuItem(this,GUIConsts.NEW_MAIL_MENU_DEFAULT_TEXT);
		mnuNewAccount = new javax.swing.JMenuItem();
		mnuCloseConnection = new javax.swing.JMenuItem();
		mnuEdit = new javax.swing.JMenu();
		mnuTools=new javax.swing.JMenu();
		mnuSaveMails = new javax.swing.JMenuItem(); 
		mnuGetMails = new javax.swing.JMenuItem();
		mnuBasicMails = new javax.swing.JMenuItem();
		mnuGetHeaders = new javax.swing.JMenuItem();
		mnuManageAccount = new javax.swing.JMenuItem();
		cmdSendReceive=new SquareJButton(this,GUIConsts.SEND_RECEIVE_BUTTON_TEXT);
		cmdNew=new SquareJButton(this,GUIConsts.NEW_MAIL_BUTTON_TEXT);
		cmdSend=new SquareJButton(this,GUIConsts.SEND_BUTTON_TEXT);
		cmdReceive=new SquareJButton(this,GUIConsts.RECEIVE_BUTTON_TEXT);
		cmdReply=new SquareJButton(this,GUIConsts.REPLY_BUTTON_TEXT);
		cmdReplyToAll=new SquareJButton(this,GUIConsts.REPLY_TO_ALL_BUTTON_TEXT);
		cmdDisconnect = new SquareJButton(this,GUIConsts.DISCONNECT_BUTTON_TEXT);
		
		initAccountTree(mailHandler.getAccountNames());
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Email Client");
		
		topPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		topPanel.setPreferredSize(new Dimension(MAIN_FRAME_DIMENSION.width-10,75));
		javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
		topPanel.setLayout(topPanelLayout);
		topPanelLayout.setHorizontalGroup(
				topPanelLayout.createSequentialGroup()
				.addComponent(cmdNew)
				.addComponent(cmdReply)
				.addComponent(cmdReplyToAll)
				.addComponent(cmdSendReceive)
				.addComponent(cmdSend)
				.addComponent(cmdReceive)
				.addGap(0, 609, Short.MAX_VALUE)
				.addComponent(cmdDisconnect)
		);
		topPanelLayout.setVerticalGroup(
				topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 57, Short.MAX_VALUE)
				.addComponent(cmdNew)
				.addComponent(cmdReply)
				.addComponent(cmdReplyToAll)
				.addComponent(cmdSendReceive)
				.addComponent(cmdSend)
				.addComponent(cmdReceive)
				.addGap(0, 57, Short.MAX_VALUE)
				.addComponent(cmdDisconnect)
		);

		mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

		treePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 3));
		treePanel.setForeground(new java.awt.Color(204, 204, 255));

		javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
		treePanel.setLayout(treePanelLayout);
		treePanelLayout.setHorizontalGroup(
				treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 104, Short.MAX_VALUE)
				.addComponent(accountTree)
		);
		treePanelLayout.setVerticalGroup(
				treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 344, Short.MAX_VALUE)
				.addComponent(accountTree)
		);



		javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
		mainPanel.setLayout(mainPanelLayout);
		mainPanelLayout.setHorizontalGroup(
				mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(mainPanelLayout.createSequentialGroup()
						.addComponent(treePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE))
		);
		mainPanelLayout.setVerticalGroup(
				mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
				.addComponent(treePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		);

		statusPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

		//lblConnectionStatus.setBackground(new java.awt.Color(153, 153, 153));
		lblConnectionStatus.setText(DEFAULT_CONNECTION_lABEL_TEXT);
		//lblConnectionStatus.setOpaque(true);

		//lblTotalNumberOfMail.setBackground(new java.awt.Color(153, 153, 153));
		lblTotalNumberOfMail.setText(DEFAULT_NUMBER_OF_MAILS_lABEL_TEXT);
		//lblTotalNumberOfMail.setOpaque(true);

		//lblNoMailsCopied.setBackground(new java.awt.Color(153, 153, 153));
		lblNoMailsCopied.setText(DEFAULT_COPIED_MAILS_lABEL_TEXT);
		//lblNoMailsCopied.setOpaque(true);

		//lblUnreadMails.setBackground(new java.awt.Color(153, 153, 153));
		lblUnreadMails.setText(DEFAULT_UNREAD_MAILS_lABEL_TEXT);
		//lblUnreadMails.setOpaque(true);
		java.awt.GridLayout statusPanelLayout = new GridLayout(0,4);
		statusPanel.setLayout(statusPanelLayout);
		statusPanel.add(lblConnectionStatus);
		statusPanel.add(lblTotalNumberOfMail);
		statusPanel.add(lblNoMailsCopied);
		statusPanel.add(lblUnreadMails);		
		
		/*javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
		statusPanel.setLayout(statusPanelLayout);
		statusPanelLayout.setHorizontalGroup(
				statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(statusPanelLayout.createSequentialGroup()
						.addComponent(lblConnectionStatus)
						.addGap(200, 200, 200)
						.addComponent(lblTotalNumberOfMail)
						.addGap(100, 100, 100)
						.addComponent(lblNoMailsCopied)
						.addGap(100, 100, 100)
						.addComponent(lblUnreadMails))
		);
		statusPanelLayout.setVerticalGroup(
				statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(lblConnectionStatus)
						.addComponent(lblUnreadMails)
						.addComponent(lblTotalNumberOfMail)
						.addComponent(lblNoMailsCopied))
		);*/
		mnuFile.setText("File");
		mnuNew.setText("New");
		mnuNew.add(mnuNewMail);

		mnuFile.add(mnuNew);

		mnuNewAccount.setText("New Account");
		mnuNewAccount.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {        	
				java.awt.EventQueue.invokeLater(new Runnable() {
					public void run() {
						new AccountFrame(mailHandler).setVisible(true);        	                
					}
				});
			}
		});

		mnuSaveMails.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(mailHandler.getSelectedAccount().isMailSaverRunning()) {
					JOptionPane.showMessageDialog(getMe(),MAIL_SAVER_RUNNING_MESSAGE);
				}
				else {
					if(null != mailHandler.getSelectedAccount()) {
						mailHandler.getSelectedAccount().getThreadList().add(new MailSaverThread(mailHandler.getSelectedAccount()));        		
					}
					else {
						JOptionPane.showMessageDialog(getMe(),NO_ACCOUNT_SELECTED_MSG);
					}
				}
			}
		});

		mnuGetMails.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(mailHandler.isIndexReaderRunning()) {
					JOptionPane.showMessageDialog(getMe(),MAIL_SAVER_RUNNING_MESSAGE);
				}
				else {
					if(null != mailHandler.getSelectedAccount()) {
						//new MessageIndexThread(mailHandler,FOLDER_TYPES[INBOX]);        		
					}
					else {
						JOptionPane.showMessageDialog(getMe(),NO_ACCOUNT_SELECTED_MSG);
					}
				}
			}
		});

		mnuBasicMails.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(mailHandler.getSelectedAccount().isMailSaverRunning()) {
					JOptionPane.showMessageDialog(getMe(),MAIL_SAVER_RUNNING_MESSAGE);
				}
				else {
					if(null != mailHandler.getSelectedAccount()) {
						mailHandler.getSelectedAccount().getThreadList().add(new BasicMailSaverThread(mailHandler.getSelectedAccount()));        		
					}
					else {
						JOptionPane.showMessageDialog(getMe(),NO_ACCOUNT_SELECTED_MSG);
					}
				}
			}
		});
		
		mnuGetHeaders.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(null != mailHandler.getSelectedAccount()) {
					mailHandler.getSelectedAccount().getThreadList().add(new HeaderThread(mailHandler.getSelectedAccount()));        		
				}
				else {
					JOptionPane.showMessageDialog(getMe(),NO_ACCOUNT_SELECTED_MSG);
				}
			}
		});
		
		mnuManageAccount.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(null != mailHandler.getSelectedAccount()) {
					new AccountFrame(mailHandler.getSelectedAccount());        		
				}
				else {
					JOptionPane.showMessageDialog(getMe(),NO_ACCOUNT_SELECTED_MSG);
				}

			}
		});

		mnuFile.add(mnuNewAccount);		
		mnuCloseConnection.setText("Close Connection");
		mnuFile.add(mnuCloseConnection);
		mnuFile.add(mnuExit);

		menuBar.add(mnuFile);

		mnuEdit.setText("Edit");
		mnuTools.setText("Tools");
		mnuSaveMails.setText("Save Mails");
		mnuGetMails.setText("Get Mails");
		mnuBasicMails.setText("Get BasicMails");
		mnuGetHeaders.setText("Get Headers");
		mnuManageAccount.setText("Manage Account");
		mnuTools.add(mnuSaveMails);
		mnuTools.add(mnuGetMails);
		mnuTools.add(mnuBasicMails);
		mnuTools.add(mnuGetHeaders);
		mnuTools.add(mnuManageAccount);
		menuBar.add(mnuEdit);
		menuBar.add(mnuTools);
		setJMenuBar(menuBar);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(statusPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(consoleScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(consoleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
		);
		
		addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }			
        });		
		tabbedPane.setPreferredSize(new Dimension((int)(getPreferredSize().getWidth() - tabbedPane.getSize().getWidth()-200),(int)getPreferredSize().getHeight()));
		pack();
	}// </editor-fold>

	public void initAccountTree(List<String> accountNamesList) {    	
		root=new DefaultMutableTreeNode("Accounts");
		accountTree=new JTree(root);
		for(String accountName:accountNamesList) {
			/*child=new DefaultMutableTreeNode(accountInformation.getAccountName());
    		for(String leaf:ACCOUNT_LEAFS) {
    			child.add(new DefaultMutableTreeNode(leaf));
    		}
    		root.add(child);*/
			addAccount(accountName);
		}    	
		accountTree.addTreeSelectionListener(new TreeSelectionListener() {

			@Override
			public void valueChanged(TreeSelectionEvent evt) {
				String componentTitle=accountTree.getSelectionPath().getLastPathComponent().toString();
				if(2 == evt.getPath().getPathCount()) {
					mailHandler.setSelectedAccount(componentTitle);
					setStatus(mailHandler.getSelectedAccount());
				}
				else if(3 == evt.getPath().getPathCount()) {
					MyScrollPane component=null;
					String accountName= accountTree.getSelectionPath().getPathComponent(accountTree.getSelectionPath().getPathCount()-2).toString();
					mailHandler.setSelectedAccount(accountName);
					setStatus(mailHandler.getSelectedAccount());
					//MailAccount mailAccount = mailHandler.getSelectedAccount();
					if(isUniqueTab(accountTree.getSelectionPath().getLastPathComponent().toString(),mailHandler.getSelectedAccount().getAccountInformation().getAccountName())) {

						if(componentTitle.equalsIgnoreCase(INBOX_KEY)) {	
							component = new MyScrollPane(getMe(),mailHandler.getSelectedAccount(),componentTitle);
							openTab(component);
							//mailHandler.loadMessageIndexes(accountName, componentTitle);
							refreshTable(mailHandler.getSelectedAccount(), componentTitle);
						}
						else {	
							component=createInboxPanel(mailHandler.getSelectedAccount(),accountTree.getSelectionPath().getLastPathComponent().toString());
							openTab(component);
							refreshTable(mailHandler.getSelectedAccount(), componentTitle);
						}							

					}
					else {
						component=(MyScrollPane)componentMap.get(getUniqueKey(mailHandler.getSelectedAccount().getAccountInformation().getAccountName(),accountTree.getSelectionPath().getLastPathComponent().toString()));
						for(int i=0;i<tabbedPane.getComponentCount();i++) {
							if(tabbedPane.getComponent(i).equals(component)) {
								tabbedPane.setSelectedComponent(component);
							}
						}						
					}
				}
				else {
					mailHandler.setSelectedAccount(null);
				}
			}

		});
		//accountTree.add();    	
	}

	public void addAccount(String accountName) {
		DefaultMutableTreeNode child=null;
		child=new DefaultMutableTreeNode(accountName);
		MailAccount mailAccount = mailHandler.getAccount(accountName);
		if(null != mailAccount.getAccountInformation().getFolderStructure()) {
			for(String leaf:mailAccount.getFolders()) {
				child.add(new DefaultMutableTreeNode(leaf));
			}
		}
		root.add(child);
		accountTree.updateUI();
	}
	
	public void addAccount(AccountInformation accountInformation) {
		DefaultMutableTreeNode child=null;
		child=new DefaultMutableTreeNode(accountInformation.getAccountName());
		if(null != accountInformation.getFolderStructure()) {
			for(String leaf:accountInformation.getFolderStructure()) {
				child.add(new DefaultMutableTreeNode(leaf));
			}
		}
		root.add(child);
		accountTree.updateUI();
	}
	
	public void refreshAccount(AccountInformation accountInformation) {
		MailAccount mailAccount = mailHandler.getAccount(accountInformation.getAccountName());
		int count = accountTree.getComponentCount();
		for(int i=0;i<count;i++) {
			if(root.getChildAt(i).toString().equals(accountInformation.getAccountName())) {
				for(String leaf:mailAccount.getFolders()) {
					((DefaultMutableTreeNode)root.getChildAt(i)).add(new DefaultMutableTreeNode(leaf));
					if(DEFAULT_FOLDER_NAME.equalsIgnoreCase(leaf)) {
						openTab(mailAccount,leaf);
					}					
				}
			}
		}		
		accountTree.updateUI();
	}

	public MyScrollPane createInboxPanel(MailAccount mailAccount,String folderType) {
		MyScrollPane scrollPane=new MyScrollPane(this,mailAccount,folderType);
		return scrollPane;        
	}

	public void sendReceive() {
		if(mailHandler.getSelectedAccount().isMailSaverRunning()) {
			JOptionPane.showMessageDialog(getMe(),MAIL_SAVER_RUNNING_MESSAGE);
		}
		else {
			if(null != mailHandler.getSelectedAccount()) {
				mailHandler.getSelectedAccount().getThreadList().add(new BasicMailSaverThread(mailHandler.getSelectedAccount()));        		
			}
			else {
				JOptionPane.showMessageDialog(getMe(),NO_ACCOUNT_SELECTED_MSG);
			}
		}
	}
	
	public void addNewMessage(MailAccount mailAccount,String componentTitle,EmailMessage emailMessage) {
		MyScrollPane myScrollPane=null;
		if(tabbedPane.getSelectedComponent() instanceof MyScrollPane) {
			myScrollPane = (MyScrollPane) tabbedPane.getSelectedComponent();
			myScrollPane.addNewMessage(emailMessage);
			setStatus(mailAccount);
			return;
		}
		else {
			for(int i=0;i<tabbedPane.getComponentCount();i++) {
				if(tabbedPane.getComponent(i) instanceof MyScrollPane) {
					myScrollPane = (MyScrollPane)tabbedPane.getComponent(i); 
					myScrollPane.addNewMessage(emailMessage);
					if(componentTitle.equalsIgnoreCase(myScrollPane.getTitle())) {
						myScrollPane.addNewMessage(emailMessage);
						setStatus(mailAccount);
						return ;
					}
				}
			}
		}		
		JOptionPane.showMessageDialog(this, "Component title not matched");
	}

	public void refreshTable(MailAccount mailAccount,String componentTitle) {
		MyScrollPane myScrollPane = (MyScrollPane) tabbedPane.getSelectedComponent();
		if(null != myScrollPane) {
			//myScrollPane.refreshTable(mailAccount.getIndexList(componentTitle));
			myScrollPane.refreshTable(mailHandler.getCurMessageIndexList());
		} 
		else {
			JOptionPane.showMessageDialog(this, "Component title not matched");
		}
	}

	public void addRow(MessageIndex messageIndex,String accountName) {
		Object object[]=new Object[COLUMN_HEADERS.length];    	
		object[0]=new Object();
		object[1]=new Object();
		object[2]=new Object();
		object[3]=new Object();
		object[4]=new Object();
		object[5]=new Object();
		try {
			object[0]=messageIndex.isSaved();
			object[1]=messageIndex.getMessageNumber();
			object[2]=messageIndex.getMessageSize()/1024;
			object[3]=MessageUtil.getShortDate(messageIndex.getSentDate());    		
			if(null != messageIndex.getFrom()) {
				object[4]=messageIndex.getFrom()[0].getPersonal()+"<"+messageIndex.getFrom()[0].getAddress()+">";
			} 		
			object[5]=messageIndex.getMessageSubject();
		}catch(ArrayIndexOutOfBoundsException e) {
			e.printStackTrace();
		}
		if(tabbedPane.getSelectedComponent() instanceof MyScrollPane) {
			MyScrollPane component=(MyScrollPane) tabbedPane.getSelectedComponent();    	
			if(component.getMailAccount().getAccountInformation().getAccountName().equals(accountName)) {
				if(component.getTitle().equalsIgnoreCase(INBOX_KEY)) {
					component.getTableModel().addRow(object);    				
					renderRow(component.getTextRenderer(), messageIndex);

				}
			}   	
		}
	}

	public void renderRow(TextRenderer textRenderer,MessageIndex messageIndex) {
		if(messageIndex.isSaved()) {
			textRenderer.setForegroundColor(SAVED_ROW_COLOR);
		}
		else {
			textRenderer.setForegroundColor(SAVED_ROW_COLOR);
		}
		if(messageIndex.isRead()) {
			textRenderer.setFont(new Font(getFont().getFontName(),Font.PLAIN,getFont().getSize()));
		}
		else {
			textRenderer.setFont(new Font(getFont().getFontName(),Font.BOLD,getFont().getSize()));
		}
	}


	public void openTab(MyScrollPane component) {
		Map<String,MessageIndex> map = mailHandler.getSelectedAccount().getHeaderMap(component.getTitle());
		mailHandler.setCurrentFolderName(component.getTitle());
		List<MessageIndex> list = MessageUtil.getListFromMap(map);
		Collections.sort(list,new MessageIndexDateComparator());
		Collections.reverse(list);
		mailHandler.setCurMessageIndexList(list);
		tabbedPane.addTab(component.getTitle(),component);
		tabbedPane.setSelectedIndex(tabbedPane.getComponentCount()-1);
	}
	
	public void openTab(MailAccount mailAccount, String componentTitle) {
		MyScrollPane myScrollPane = new MyScrollPane(this,mailHandler.getSelectedAccount(),componentTitle);
		tabbedPane.addTab(myScrollPane.getTitle(),myScrollPane);
		tabbedPane.setSelectedIndex(tabbedPane.getComponentCount()-1);
	}

	private boolean isUniqueTab(String title,String accountName) {		
		for(int i=0;i<tabbedPane.getComponentCount();i++) {	
			if(tabbedPane.getComponent(i) instanceof MyScrollPane) {
				MyScrollPane myScrollPane =(MyScrollPane)tabbedPane.getComponent(i);
				if(title.equalsIgnoreCase(myScrollPane.getTitle())) {
					if(accountName.equals(myScrollPane.getMailAccount().getAccountInformation().getAccountName())) {
						return false;
					}    				
				}    
			}
			else if(tabbedPane.getComponent(i) instanceof MessagePanel) {
				MessagePanel messagePanel =(MessagePanel)tabbedPane.getComponent(i);
				if(title.equalsIgnoreCase(messagePanel.getTitle())) {
					if(accountName.equals(messagePanel.getAccountName())) {
						return false;
					}    				
				}    
			}
								
		}
		return true;
	}

	public void openTab(int selectedRow,MailAccount mailAccount,String folderName) {
		//selectedRow = mailAccount.getIndexList(folderName).size()-selectedRow-1;
		MimeMessage message = null;		
		MessageIndex messageIndex = mailHandler.getCurMessageIndexList().get(selectedRow);
		AccountInformation accountInformation = mailHandler.getSelectedAccount().getAccountInformation();
		try {
				message = DAO.getMessage(mailAccount.getAccountInformation(),
						folderName, mailHandler.getCurMessageIndexList().get(selectedRow).getUID() + ".dmp");
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (MessagingException e) {
				e.printStackTrace();
		}
		
		//if(null != message && isUniqueTab(message.getSubject(), mailAccount.getAccountInformation().getAccountName())) {
		MessagePanel messagePanel = new MessagePanel(messageIndex,accountInformation.getAccountName());
		messagePanel.showMessageHeader(messageIndex);
		if(null != message)
			messagePanel.showMessageDetail(message,mailHandler.getSelectedAccount());
		tabbedPane.addTab(messageIndex.getMessageSubject(),messagePanel);
		tabbedPane.setSelectedIndex(tabbedPane.getComponentCount() - 1);
		
	}

	private String getUniqueKey(String accountName,String title) {
		return (accountName+":"+title).toUpperCase();
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainFrame(null).setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JPanel mainPanel;
	private javax.swing.JTabbedPane tabbedPane;
	private javax.swing.JLabel lblConnectionStatus;
	private javax.swing.JLabel lblNoMailsCopied;
	private javax.swing.JLabel lblTotalNumberOfMail;
	private javax.swing.JLabel lblUnreadMails;   
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JMenuItem mnuCloseConnection;
	private javax.swing.JMenu mnuEdit;
	private javax.swing.JMenu mnuFile;
	private javax.swing.JMenu mnuNew;
	private javax.swing.JMenuItem mnuExit;
	private javax.swing.JMenu mnuTools;
	private javax.swing.JMenuItem mnuSaveMails;
	private javax.swing.JMenuItem mnuGetMails;
	private javax.swing.JMenuItem mnuBasicMails;
	private javax.swing.JMenuItem mnuGetHeaders;
	private javax.swing.JMenuItem mnuNewAccount;
	private javax.swing.JMenuItem mnuNewMail;
	private javax.swing.JMenuItem mnuManageAccount;
	private javax.swing.JPanel statusPanel;
	private javax.swing.JPanel topPanel;
	private javax.swing.JPanel treePanel;
	private DefaultMutableTreeNode root;    
	private JButton cmdSendReceive;
	private JButton cmdSend;
	private JButton cmdReceive;
	private JButton cmdNew;
	private JButton cmdReply;
	private JButton cmdReplyToAll;
	private JButton cmdDisconnect;
	private JTree accountTree;
	
	// End of variables declaration

	public MailHandler getMailHandler() {
		return mailHandler;
	}

	public void setMailHandler(MailHandler mailHandler) {
		this.mailHandler = mailHandler;
	}

	private MainFrame getMe() {
		return this;
	}

	public javax.swing.JTabbedPane getTabbedPane() {
		return tabbedPane;
	}
	
	public void setStatus(MailAccount mailAccount) {
		setConnectionStatus(mailAccount.getConnectionStatus());
		setMailCount(mailAccount.getMessageCount());
		setNumberOfCopiedMails(mailAccount.getSavedMessageCount());
	}

	public void setConnectionStatus(String status) {
		lblConnectionStatus.setText(DEFAULT_CONNECTION_lABEL_TEXT+status);
	}

	public void setMailCount(int count) {
		lblTotalNumberOfMail.setText(DEFAULT_NUMBER_OF_MAILS_lABEL_TEXT+count);
	}

	public void setNumberOfCopiedMails(int number) {
		lblNoMailsCopied.setText(DEFAULT_COPIED_MAILS_lABEL_TEXT+number);    	
	}

	public void markAsCopied(int index) {
		//table.setValueAt(true,table.getvindex,0);
	}

	@Override
	public void run() {
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		initComponents();		
	}	
	private void formWindowClosing(WindowEvent evt) {
		LOG.info("fired formWindowClosing event");
		mailHandler.closeSystem();
	}
}
