/*
 * CreateMail.java
 *
 * Created on August 13, 2009, 7:21 PM
 */

package gui;

import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Message.RecipientType;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import email.MessageIndex;
import util.GUIUtil;
import account.AccountInformation;
import account.MailAccount;

/**
 *
 * @author  Pratik
 */
public class NewMailFrame extends javax.swing.JFrame implements ActionListener {

	private static final long serialVersionUID = 5616318955375767359L;
	private MainFrame mainFrame=null;
	private MailAccount mailAccount;
	private Font currentFont;
	private MessagePanel messagePanel;
	
    /** Creates new form CreateMail */
    public NewMailFrame(MainFrame mainFrame) {
    	this.mainFrame=mainFrame;
    	this.mailAccount=mainFrame.getMailHandler().getSelectedAccount();
        initComponents();
        setVisible(true);
    }
    
    public NewMailFrame(MainFrame mainFrame,boolean isReply) {
    	this(mainFrame);
    	messagePanel = (MessagePanel)mainFrame.getTabbedPane().getSelectedComponent();
    	Message message = messagePanel.getMessage();
    	populateMessage(message);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        lblTo = new javax.swing.JLabel();
        lblCC = new javax.swing.JLabel();
        lblBCC = new javax.swing.JLabel();
        lblSubject = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        txtTo = new javax.swing.JTextField();
        txtCC = new javax.swing.JTextField();
        txtBCC = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessageEditor = new javax.swing.JEditorPane();
        jToolBar1 = new javax.swing.JToolBar();
        cmdBold = new javax.swing.JButton();
        cmdItalics = new javax.swing.JButton();
        cmdUnderline = new javax.swing.JButton();
        fontList = new javax.swing.JComboBox();
        fontSizeList = new javax.swing.JComboBox();
        lblFrom = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        attachmentPanel = new javax.swing.JPanel();
        lblAttachments = new javax.swing.JLabel();
        attachmentScrollPane = new javax.swing.JScrollPane();
        attachmentList = new javax.swing.JList();
        topPanel = new javax.swing.JPanel();
        cmdContacts = new javax.swing.JButton();
        cmdAttach = new javax.swing.JButton();
        cmdRemoveAttachment = new javax.swing.JButton();
        cmdSend = new SquareJButton(this,GUIConsts.SEND_BUTTON_TEXT);
        attachedFiles=new ArrayList<File>();
        currentFont = GUIUtil.DEFAULT_FONT;
        
        this.addWindowListener(new WindowAdapter() {
       	 public void windowClosed(java.awt.event.WindowEvent evt) {
                createMailWindowClosed(evt);
            }
       });
        setTitle("Create Mail");

        mainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblTo.setText("To: ");
        lblCC.setText("cc");
        lblBCC.setText("Bcc");
        lblSubject.setText("Subject: ");
        jScrollPane1.setViewportView(txtMessageEditor);
        jToolBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jToolBar1.setRollover(true);

        cmdBold.setFont(new java.awt.Font("Tahoma", 1, 11));
        cmdBold.setText("B");
        cmdBold.setFocusable(false);
        cmdBold.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdBold.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdBold.addActionListener(this);
        jToolBar1.add(cmdBold);

        cmdItalics.setFont(new java.awt.Font("Tahoma", 3, 11));
        cmdItalics.setText("I");
        cmdItalics.setFocusable(false);
        cmdItalics.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdItalics.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdItalics.addActionListener(this);
        jToolBar1.add(cmdItalics);

        cmdUnderline.setFont(new java.awt.Font("Tahoma", Font.BOLD, 11));
        cmdUnderline.setText("U");
        cmdUnderline.setFocusable(false);
        cmdUnderline.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdUnderline.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(cmdUnderline);        
        fontList.setModel(new javax.swing.DefaultComboBoxModel(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()));
        fontList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontListActionPerformed(evt);
            }
        });
        jToolBar1.add(fontList);

        fontSizeList.setModel(new javax.swing.DefaultComboBoxModel(GUIUtil.FONT_SIZES));
        fontSizeList.addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent evt) {
        		fontSizeListActionPerformed(evt);
        	}
        });
        jToolBar1.add(fontSizeList);

        lblFrom.setText("From:");
        txtFrom.setText(mailAccount.getAccountInformation().getFrom());
        txtFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFromActionPerformed(evt);
            }
        });

        attachmentPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblAttachments.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAttachments.setText("Attachments");
        txtMessageEditor.setFont(currentFont);
        attachmentList.setModel(new javax.swing.DefaultListModel());            
        attachmentScrollPane.setViewportView(attachmentList);

        javax.swing.GroupLayout attachmentPanelLayout = new javax.swing.GroupLayout(attachmentPanel);
        attachmentPanel.setLayout(attachmentPanelLayout);
        attachmentPanelLayout.setHorizontalGroup(
            attachmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(attachmentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
            .addComponent(lblAttachments, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
        );
        attachmentPanelLayout.setVerticalGroup(
            attachmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attachmentPanelLayout.createSequentialGroup()
                .addComponent(lblAttachments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(attachmentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSubject)
                    .addComponent(lblCC)
                    .addComponent(lblBCC)
                    .addComponent(lblTo)
                    .addComponent(lblFrom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCC, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(txtBCC, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(txtTo, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(txtSubject, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(txtFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(attachmentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFrom)
                            .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTo)
                            .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCC)
                            .addComponent(txtCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBCC)
                            .addComponent(txtBCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSubject)
                            .addComponent(txtSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(attachmentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
        );

        topPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cmdContacts.setText("Contacts");
        cmdContacts.setMaximumSize(new java.awt.Dimension(75, 25));
        cmdContacts.setMinimumSize(new java.awt.Dimension(75, 25));
        cmdContacts.setPreferredSize(new java.awt.Dimension(75, 25));
        cmdContacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdContactsActionPerformed(evt);
            }
        });

        cmdAttach.setText("Attach");
        cmdAttach.setMaximumSize(new java.awt.Dimension(75, 25));
        cmdAttach.setMinimumSize(new java.awt.Dimension(75, 25));
        cmdAttach.setPreferredSize(new java.awt.Dimension(75, 25));
        cmdAttach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAttachActionPerformed(evt);
            }
        });
        
        cmdRemoveAttachment.setText("Remove Attachment");
        cmdRemoveAttachment.setMaximumSize(new java.awt.Dimension(75, 25));
        cmdRemoveAttachment.setMinimumSize(new java.awt.Dimension(75, 25));
        cmdRemoveAttachment.setPreferredSize(new java.awt.Dimension(75, 25));
        cmdRemoveAttachment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	cmdRemoveAttachmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addComponent(cmdSend, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdAttach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmdRemoveAttachment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdContacts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(313, Short.MAX_VALUE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmdAttach, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
            .addComponent(cmdRemoveAttachment, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
            .addComponent(cmdSend, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
            .addComponent(cmdContacts, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
       
        pack();
    }// </editor-fold>
    
    public void createMailWindowClosed(WindowEvent evt) {
    	this.dispose();
    }
    
    private void populateMessage(Message message) {
    	txtMessageEditor.setContentType("text/html");    	
    	try {
    		txtTo.setText(message.getReplyTo()[0].toString());
			txtSubject.setText(message.getSubject());
    		txtMessageEditor.setText("<br/><br/><br/><br/>"+messagePanel.getHtmlContent());
		} catch (MessagingException e) {
			e.printStackTrace();
		}
    }

    private void fontListActionPerformed(java.awt.event.ActionEvent evt) {
    	Font newFont = new Font(fontList.getSelectedItem().toString(),currentFont.getStyle(),currentFont.getSize());
    	currentFont = newFont;
    	txtMessageEditor.setFont(currentFont);
    }
    
    private void fontSizeListActionPerformed(java.awt.event.ActionEvent evt) {
    	Font newFont = new Font(currentFont.getFamily(),currentFont.getStyle(),(Integer) fontSizeList.getSelectedItem());
    	currentFont = newFont;
    	txtMessageEditor.setFont(currentFont);
    }

    private void txtFromActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
}
    
    private void cmdAttachActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser=new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        File[] selectedFiles;
        fileChooser.showOpenDialog(this);        
        selectedFiles = fileChooser.getSelectedFiles();
        DefaultListModel model = (DefaultListModel) attachmentList.getModel();
        for(File file:selectedFiles) {
        	model.addElement(file.getName());
        	attachedFiles.add(file);
        }
    }
    
    private void cmdRemoveAttachmentActionPerformed(java.awt.event.ActionEvent evt) {
    	DefaultListModel model=(DefaultListModel) attachmentList.getModel();
    	int indexes[]=attachmentList.getSelectedIndices();
    	int i=0;
        if(0 == attachmentList.getSelectedIndices().length) {
        	
        }
        else {
        	for(int index:indexes) {
        		model.remove(index-i);
        		attachedFiles.remove(index-i);
        		i++;
        	}
        }
    }

    private void cmdContactsActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }
    
    public InternetAddress[] getAddressFromString(String strAddress) throws AddressException {
    	InternetAddress internetAddresses[];
    	int count=-1;
    	if(strAddress.length() > 0) {
    		count=1;

    		Scanner scanner=new Scanner(strAddress);
    		scanner.useDelimiter(",");
    		for(int i=0;i<strAddress.length();i++) {
    			if(strAddress.charAt(i) == ',') {
    				count++;
    			}
    		}
    		internetAddresses=new InternetAddress[count];
    		count=0;
    		while(scanner.hasNext()) {
    			internetAddresses[count]=new InternetAddress(scanner.next());
    			count++;
    		}
    		return internetAddresses;
    	}
    	return null;
    }
    
    public MimeMessage createMail(Session session) throws MessagingException {    	
    	InternetAddress fromAddress=getAddressFromString(txtFrom.getText())[0];
    	InternetAddress toAddress[]=getAddressFromString(txtTo.getText());
    	InternetAddress ccAddress[]=getAddressFromString(txtCC.getText());
    	InternetAddress bccAddress[]=getAddressFromString(txtBCC.getText());
    	MimeMessage message=new MimeMessage(session);
    	message.setFrom(fromAddress);
    	message.setRecipients(RecipientType.TO, toAddress);
    	message.setRecipients(RecipientType.CC, ccAddress);
    	message.setRecipients(RecipientType.BCC, bccAddress);
    	message.setSubject(txtSubject.getText());
    	if(0 == attachedFiles.size()) {
    		message.setText(txtMessageEditor.getText());
    	}
    	else {
    		message.setContent(createMuliPart());
    	}    	    	
    	return message;
    }
    
    private Multipart createMuliPart() throws MessagingException {
    	Multipart multipart=new MimeMultipart();
    	BodyPart bodyPart=new MimeBodyPart();
    	DataSource dataSource;
    	for(File file:attachedFiles) {
    		dataSource=new FileDataSource(file);
    		bodyPart.setDataHandler(new DataHandler(dataSource));
    		bodyPart.setFileName(file.getName());
    		multipart.addBodyPart(bodyPart);
    	}
    	return multipart;
    }
    
    public MainFrame getMainFrame() {
		return mainFrame;
	}

	/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewMailFrame(null).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify
    private javax.swing.JList attachmentList;
    private javax.swing.JPanel attachmentPanel;
    private javax.swing.JScrollPane attachmentScrollPane;
    private javax.swing.JButton cmdAttach;
    private javax.swing.JButton cmdRemoveAttachment;
    private javax.swing.JButton cmdBold;
    private javax.swing.JButton cmdContacts;
    private javax.swing.JButton cmdItalics;
    private javax.swing.JButton cmdSend;
    private javax.swing.JButton cmdUnderline;
    private javax.swing.JComboBox fontList;
    private javax.swing.JComboBox fontSizeList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblAttachments;
    private javax.swing.JLabel lblBCC;
    private javax.swing.JLabel lblCC;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblTo;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTextField txtBCC;
    private javax.swing.JTextField txtCC;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JEditorPane txtMessageEditor;
    private javax.swing.JTextField txtSubject;
    private javax.swing.JTextField txtTo;
    private List<File> attachedFiles;
    // End of variables declaration

	@Override
	public void actionPerformed(ActionEvent evt) {
		String actionCommand = evt.getActionCommand();
		if("B".equals(actionCommand)) {
			Font newFont = new Font(currentFont.getFamily(),currentFont.isBold()?Font.PLAIN:Font.BOLD,currentFont.getSize());
			currentFont = newFont;
			txtMessageEditor.setFont(currentFont);
		}
		else if("I".equals(actionCommand)) {
			Font newFont = new Font(currentFont.getFamily(),(currentFont.isBold()?Font.BOLD:Font.PLAIN)+((currentFont.isItalic()?0:Font.ITALIC)),currentFont.getSize());
			currentFont = newFont;
			txtMessageEditor.setFont(currentFont);
		}/*
		else if("U".equals(actionCommand)) {
			AttributedString selectedText = new AttributedString(txtMessage.getSelectedText());
			selectedText.addAttribute(TextAttribute.FONT, currentFont);
			selectedText.addAttribute(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
		}*/
	}
    
}
